#!/usr/bin/python
#   Flytec/Brauniger Filesystem
#   Copyright (C) 2008  Tom Payne
#
#   This program is free software: you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation, either version 3 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program.  If not, see <http://www.gnu.org/licenses/>.


# TODO fix route deletion
# TODO route upload


from __future__ import with_statement

try:
    from cStringIO import StringIO
except ImportError:
    from StringIO import StringIO
from collections import defaultdict
import errno
import logging
import os.path
import sys
import time
from zipfile import ZipFile, ZipInfo, ZIP_DEFLATED

import fuse

import filesystem
from flytec import Flytec
import gpx
import wpt


class File(filesystem.File):

    def __init__(self, flytec, keys, name):
        filesystem.File.__init__(self, name)
        self.flytec = flytec
        self._content = None
        self.keys = keys
        self.revs = defaultdict()

    def sync(self):
        if self._content is None or any(self.revs[k] != self.flytec.revs[k] for k in self.keys):
            self._content = self.flytec_content()
            for key in self.keys:
                self.revs[key] = self.flytec.revs[key]

    def getattr(self):
        self.sync()
        return filesystem.File.getattr(self)

    def content(self):
        self.sync()
        return self._content


class Directory(filesystem.Directory):

    def __init__(self, flytec, name, **kwargs):
        filesystem.Directory.__init__(self, name, **kwargs)
        self.flytec = flytec
        self.st_size = 4096


class GPXFile(File):

    def flytec_content(self):
        string_io = StringIO()
        string_io.write('<?xml version="1.0" encoding="utf-8"?>\n')
        tb = None
        with gpx.gpx_tag() as tb:
            self.gpx_content(tb)
        gpx.write(tb, string_io)
        return string_io.getvalue()

    def gpx_content(self):
        pass


class MemoryFile(File):

    def __init__(self, flytec, name):
        File.__init__(self, flytec, ('memory',), name)
        self.st_size = 352

    def flytec_content(self):
        return self.flytec.memory()


class RoutesDirectory(Directory):

    def content(self):
        for route in self.flytec.routes():
            yield RouteFile(self.flytec, route)
        yield RoutesFile(self.flytec, 'routes.gpx')


class RouteFile(GPXFile):

    def __init__(self, flytec, route):
        name = '%s.gpx' % route.name.rstrip()
        keys = set(['route_%s' % route.name])
        for routepoint in route.routepoints:
            keys.add('waypoint_%s' % routepoint.long_name)
        GPXFile.__init__(self, flytec, keys, name)
        self.route = route

    def gpx_content(self, tb):
        gpx.rte_tag(tb, self.route, self.flytec.waypoint_get)

    def unlink(self):
        if not self.flytec.route_unlink(self.route):
            raise IOError, (errno.EPERM, None)


class RoutesFile(GPXFile):

    def __init__(self, flytec, name):
        GPXFile.__init__(self, flytec, ('routes', 'waypoints'), name)

    def gpx_content(self, tb):
        for route in self.flytec.routes():
            gpx.rte_tag(tb, route, self.flytec.waypoint_get)


class SettingsDirectory(Directory):

    def __init__(self, flytec, name):
        Directory.__init__(self, flytec, name)
        self._content = []
        self._content.append(MemoryFile(self.flytec, 'memory'))

    def content(self):
        return iter(self._content)


class TracklogFile(File):

    def __init__(self, flytec, tracklog):
        File.__init__(self, flytec, (), tracklog.filename)
        self.tracklog = tracklog
        self.st_ctime = time.mktime(tracklog.dt.timetuple())
        self.st_mtime = self.st_ctime + tracklog.duration.seconds
        self.st_atime = self.st_mtime

    def flytec_content(self):
        return self.flytec.tracklog_content(self.tracklog)

    def rename(self, old, new):
        if os.path.dirname(old) != os.path.dirname(new):
            raise IOError, (errno.EPERM, None)
        self.flytec.tracklog_rename(self.tracklog, os.path.basename(new))

    def unlink(self):
        self.flytec.tracklog_unlink(self.tracklog)


class TracklogsDirectory(Directory):

    def content(self):
        for tracklog in self.flytec.tracklogs():
            yield TracklogFile(self.flytec, tracklog)
        yield TracklogsZipFile(self.flytec, 'tracklogs.zip')


class TracklogsZipFile(File):

    def __init__(self, flytec, name):
        File.__init__(self, flytec, ('tracklogs',), name)

    def flytec_content(self):
        string_io = StringIO()
        tracklogs = self.flytec.tracklogs()
        ctimes = (t.dt for t in tracklogs)
        self.st_ctime = time.mktime(min(ctimes).timetuple())
        mtimes = (t.dt + t.duration for t in tracklogs)
        self.st_mtime = time.mktime(max(mtimes).timetuple())
        self.st_atime = self.st_mtime
        zip_file = ZipFile(string_io, 'w', ZIP_DEFLATED)
        for tracklog in tracklogs:
            zi = ZipInfo(tracklog.filename)
            zi.compress_type = ZIP_DEFLATED
            zi.date_time = (tracklog.dt + tracklog.duration).timetuple()[:6]
            zi.external_attr = 0444 << 16
            zip_file.writestr(zi, self.flytec.tracklog_content(tracklog))
        zip_file.close()
        return string_io.getvalue()


class WaypointsDirectory(Directory):

    def content(self):
        for waypoint in self.flytec.waypoints():
            yield WaypointFile(self.flytec, waypoint)
        yield WaypointsFile(self.flytec, 'waypoints.gpx')

    def create(self, path, mode):
        return WaypointsUploadFile(self.flytec, path)


class WaypointFile(GPXFile):

    def __init__(self, flytec, waypoint):
        name = '%s.gpx' % waypoint.long_name.rstrip()
        keys = ('waypoint_%s' % waypoint.long_name,)
        GPXFile.__init__(self, flytec, keys, name)
        self.waypoint = waypoint

    def gpx_content(self, tb):
        gpx.wptType_tag(tb, self.waypoint, 'wpt')

    def unlink(self):
        if not self.flytec.waypoint_unlink(self.waypoint):
            raise IOError, (errno.EPERM, None)


class WaypointsFile(GPXFile):

    def __init__(self, flytec, name):
        GPXFile.__init__(self, flytec, ('waypoints',), name)

    def gpx_content(self, tb):
        for waypoint in self.flytec.waypoints():
            gpx.wptType_tag(tb, waypoint, 'wpt')


class WaypointsUploadFile(File):

    def __init__(self, flytec, name):
        File.__init__(self, flytec, (), name)
        self.string_io = StringIO()

    def flytec_content(self):
        return self.string_io.getvalue()

    def flush(self):
        self.string_io.seek(0)
        ext = os.path.splitext(self.name)[1].lower()
        if ext == '.gpx':
            for waypoint in gpx.waypoints(self.string_io):
                self.flytec.waypoint_create(waypoint)
        elif ext == '.wpt':
            for waypoint in wpt.waypoints(self.string_io):
                self.flytec.waypoint_create(waypoint)
        else:
            raise IOError, (errno.EINVAL, None)

    def write(self, buffer, offset):
        self.string_io.seek(offset)
        self.string_io.write(buffer)
        return len(buffer)


class FlytecRootDirectory(Directory):

    def __init__(self, flytec):
        Directory.__init__(self, flytec, '')
        self._content = []
        self._content.append(RoutesDirectory(self.flytec, 'routes'))
        self._content.append(SettingsDirectory(self.flytec, '.settings'))
        self._content.append(TracklogsDirectory(self.flytec,
                                                'tracklogs',
                                                mode=0755))
        self._content.append(WaypointsDirectory(self.flytec, 'waypoints'))

    def content(self):
        return iter(self._content)


class FlytecFilesystem(filesystem.Filesystem):

    def __init__(self, *args, **kwargs):
        filesystem.Filesystem.__init__(self, *args, **kwargs)
        self.device = '/dev/ttyUSB0'
        self.parser.add_option(mountopt='device',
                               metavar='PATH',
                               help='set device')
        self.f_bsize = 1024
        self.f_frsize = 1024
        self.f_blocks = 200

    def main(self):
        self.flytec = Flytec(self.device)
        self.root = FlytecRootDirectory(self.flytec)
        self.multithreaded = False
        return filesystem.Filesystem.main(self)

    def statfs(self):
        self.f_bfree = self.f_blocks - len(self.flytec.waypoints())
        self.f_bavail = self.f_bfree
        self.f_files = self.f_blocks
        self.f_ffree = self.f_bfree
        self.f_favail = self.f_bavail
        return self


def main(argv):
    flytecfs = FlytecFilesystem(dash_s_do='setsingle', usage=fuse.Fuse.fusage)
    flytecfs.parse(args=argv, values=flytecfs, errex=1)
    if flytecfs.fuse_args.mount_expected():
        flytecfs.main()


if __name__ == '__main__':
    main(sys.argv)
